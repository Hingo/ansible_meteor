---
- name: prepare cloud infrastructure
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    key_name: vineet-michael-ansible
    instance_type: t2.micro
    image: ami-d05e75b8
    region: us-east-1
  tasks:
  - name: install boto
    pip: name=boto
  - name: create a virtual private cloud (vpc)
    ec2_vpc:
      state: present
      cidr_block: 10.0.0.0/16
      internet_gateway: yes
      region: "{{region}}"
      resource_tags: { "env": "dev" }
      subnets:
        - cidr: 10.0.1.0/24
          az: us-east-1a
          resource_tags: { "env":"dev", "tier" : "web" }
        - cidr: 10.0.2.0/24
          az: us-east-1c
          resource_tags: { "env":"dev", "tier" : "app" }
        - cidr: 10.0.3.0/24
          az: us-east-1d
          resource_tags: { "env":"dev", "tier" : "db" }
      route_tables:
        - subnets:
            - 10.0.1.0/24
            - 10.0.2.0/24
            - 10.0.3.0/24
          routes:
            - dest: 0.0.0.0/0
              gw: igw
    register: ec2vpc
  - name: create a security group for the vpc
    ec2_group:
      state: present
      name: vineet-is-secure
      description: vineet is a hulk bouncer!
      region: "{{region}}"
      vpc_id: "{{ec2vpc.vpc_id}}"
      rules:
        - proto: tcp
          type: ssh
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          type: http
          from_port: 3000
          to_port: 3000
          cidr_ip: 0.0.0.0/0
    register: ec2group
  - name: launch aws ec2 instances
    ec2:
      key_name: "{{key_name}}"
      group_id: "{{ec2group.group_id}}"
      vpc_subnet_id: "{{ec2vpc.subnets[0].id}}"
      instance_type: "{{instance_type}}"
      image: "{{image}}"
      region: "{{region}}"
      wait: true
      assign_public_ip: yes
      instance_tags:
        Name: Demo
      exact_count: 3
      count_tag:
        Name: Demo
    register: ec2 
  - name: add aws ec2 instances to hosts
    add_host: name={{ item.public_ip }} groups=ec2hosts
    with_items: ec2.tagged_instances
  - name: wait for SSH of aws ec2 instances to come up
    wait_for: host={{ item.public_ip }} port=22 delay=10 timeout=60 state=started
    with_items: ec2.tagged_instances



- name: prepare ec2 instances
  hosts: ec2hosts
  user: ubuntu
#  sudo: True
  gather_facts: true
  tasks:
  - name: download meteor
    get_url: url=https://install.meteor.com/ dest=~/meteor_install
  - name: install meteor
    command: sh ~/meteor_install
  - apt: name=git update_cache=yes
    sudo: true
  - name: download meteor example app
    git: repo=https://github.com/Hingo/ansible_meteor.git dest=~/ansible_meteor/
  - name: copy startup meteor app service
    copy: src=meteor-app.conf dest=/etc/init/
    sudo: true
  - name: run meteor app
    shell: chdir=~/ansible_meteor/todo_example_app nohup meteor run --production
    async: 999999
    poll: 0
  - name: start meteor app service
    service: name=meteor-app state=started
    sudo: true

- name: enable ec2 instanes
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    region: us-east-1
  tasks:
  - name: create a security group for the elb
    ec2_group:
      state: present
      name: vineet-is-secure-elb
      description: vineet is a hulk bouncer!
      region: "{{region}}"
      vpc_id: "{{ec2vpc.vpc_id}}"
      rules:
        - proto: tcp
          type: http
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
    register: ec2elbgroup
  - name: create elastic load balancer (elb)
    ec2_elb_lb:
      name: "Demo-ELB"
      subnets: ["{{ec2vpc.subnets[0].id}}"]
      region: "{{region}}"
      security_group_ids: ["{{ec2group.group_id}}", "{{ec2elbgroup.group_id}}"]
      health_check:
        ping_protocol: http
        ping_port: 3000
        ping_path: "/"
        response_timeout: 5
        interval: 30
        unhealthy_threshold: 2
        healthy_threshold: 2
      listeners:
        - protocol: http
          load_balancer_port: 80
          instance_port: 3000
      state: present
  - name: register ec2 instances with elb
    ec2_elb:
      instance_id: "{{item.id}}"
      ec2_elbs: "Demo-ELB"
      region: "{{region}}"
      state: present
    with_items: "{{ec2.tagged_instances}}"